name: Build and Release UDAV

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from version.hpp
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep 'UDAV_VERSION' src/includes/version.hpp | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check existing releases
        id: check_release
        shell: bash
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          echo "Current version: $CURRENT_VERSION"

          # Отримуємо список релізів (якщо їх немає, RELEASES буде порожнім)
          RELEASES=$(gh release list --limit 100 | awk '{print $1}' || true)

          if echo "$RELEASES" | grep -qx "$CURRENT_VERSION"; then
          echo "Version already exists, incrementing patch..."
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
          echo "Version not found, using current version."
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure and Build project
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: UDAV-${{ matrix.os }}
          path: build/

  release:
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get version from version.hpp
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=UDAV_VERSION ")[^"]+' src/includes/version.hpp)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Publishing release: $VERSION"
          gh release create "$VERSION" ./artifacts/** --title "UDAV v$VERSION" --notes "Automated multi-platform release"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
