name: Build and Release UDAV

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-and-package:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from version.hpp
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep 'UDAV_VERSION' src/includes/version.hpp | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure and Build project
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake ..
          cmake --build . --config Release

      - name: Package build
        shell: bash
        run: |
          mkdir -p dist
          VERSION=${{ steps.get_version.outputs.version }}

          BIN_FILE=$(find build -type f -iname "udav*" | head -n 1)

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -j dist/UDAV-windows-$VERSION.zip "$BIN_FILE"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            tar -czf dist/UDAV-macos-$VERSION.tar.gz -C $(dirname "$BIN_FILE") $(basename "$BIN_FILE")
          else
            tar -czf dist/UDAV-linux-$VERSION.tar.gz -C $(dirname "$BIN_FILE") $(basename "$BIN_FILE")
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: UDAV-${{ matrix.os }}
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-and-package

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep 'UDAV_VERSION' src/includes/version.hpp | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and upload files
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          gh release create "$VERSION" --title "UDAV v$VERSION" --notes "Automated multi-platform release" || true

          for file in ./artifacts/*; do
            gh release upload "$VERSION" "$file"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
